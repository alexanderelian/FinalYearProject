8+3
library(datasets)
install.Cygwin
?list
??ad
??rbind
rbind?
s
s
s
?rbind
mat <- matrix(0,nrow=3,ncol=3)
mat
mat <- mat[-3]
mat
mat <- matrix(0,nrow=3,ncol=3)
mat <- mat[-3, 0]
mat
mat <- matrix(0,nrow=3,ncol=3)
mat
mat[-c(1,2),]
mat = mat[-c(1,2),]
mat
mat <- matrix(0,nrow=3,ncol=3)
mat = mat[,1:2]
mat
mat <- matrix(0,nrow=3,ncol=3)
mat <- mat[-3,]
mat
y <- 2
y <<- 1
y
y <<- 1
y
a <- c(10, 4, 7, 10, 12)
a
d <- c(12, 5, 2, 6, 14)
traded <- sum(mapply(function(x,y) min(x,y), a, d))
traded
cm <- cummax(c(-1,1-2,2,-3,3))
cm
cm <- cummax(c(-1,1,-2,2,-3,3))
cm
prices <- c(100,102,103,104)
s <- vector(mode='numeric', legnth=length(prices))
s <- vector(mode='numeric', length=length(prices))
n <- 2
s[1] <- prices[1]
for (i in n:length(prices))
s[i] <- sum(prices[i:(i-n+1)])/n
s
prices <- c(100, 101, 99, 98, 99, 101, 97, 103)
n <- 2
long <- short <- rep(0,length(prices))
for (i int (n+1):(length(prices))){}
for (i int (n+1):(length(prices))){
for (i int (n+1):(length(prices)))
for (i in (n+1):(length(prices)))
long[i] = ifelse(all(prices[i] > prices[(i-1):(i-n)]),1,0)
for (i in (n+1):(length(prices))) { }
for (i in (n+1):(length(prices)))
prices <- c(100, 101, 99, 98, 99, 101, 97, 103)
n <- 2
for (i in (n+1):(length(prices))) { long[i] <- ifelse(all(prices[i] > prices[(i-1):(i-n)]),1,0 ) short[i] <- ifelse(all(prices[i] < prices[i-1):(i-n)]), -1, 0)}
for (i in (n+1):(length(prices))) { long[i] <- ifelse(all(prices[i] > prices[(i-1):(i-n)]),1,0 ); short[i] <- ifelse(all(prices[i] < prices[i-1):(i-n)]), -1, 0)}
for (i in (n+1):(length(prices))) { long[i] <- ifelse(all(prices[i] > prices[(i-1):(i-n)]),1,0 ); short[i] <- ifelse(all(prices[i] < prices(i-1):(i-n)]), -1, 0)}
for (i in (n+1):(length(prices))) { long[i] <- ifelse(all(prices[i] > prices[(i-1):(i-n)]),1,0 ); short[i] <- ifelse(all(prices[i] < prices[(i-1):(i-n)]), -1, 0)}
signal <- long + short
signal
n <- seq(from=10, to=10, by=10)
n
n <- seq(from=10, to=100, by=10)
n
hold <- seq(from=10, to=20, by=1)
hold
flag <- 0:1
flag
params <- list(n,hold,flag)
params
nparams <- prod(sapply(params, length))
npara]
nparams
params
length(params)
x <- 2
y <<- 1
x+y
x <- 1; y <-2
func <- function() {x <- 2;y<<-1}
func()
k <- x+y
k
x
ha <- func()
ha
func
mat <- matrix(0,nrow=3,ncol=3)
mat <- mat[-3,]
mat
time = c(1,2,3)
bids= c(100, 101, 100)
asks = c(101, 102, 102)
quotes <- data.frame(time=time, bids=bids, asks=asks)
quotes
quotes <- quotes[quotes$asks - quotes$bids > 1]
quotes
quotes <- data.frame(time=time, bids=bids, asks=asks)
quotes
quotes <- quotes[quotes$asks - quotes$bids > 1,]
quotes
quotes <- data.frame(time=time, bids=bids, asks=asks)
quotes <- quotes[quotes$bids - quotes$asks > 1,]
quotes
quotes <- data.frame(time=time, bids=bids, asks=asks)
k = 1
k
out <- cumprod(rep(k,times=5))
out
k = 2
out <- cumprod(rep(k,times=5))
out
k
out <- cumprod(rep(k,times=5))
out
a <- c(10,4,7,10,12)
d <- c(12,5,2,6,2)
traded <- sum(mapply(min, a, d))
traded
source('betMe')
setwd("C:/Users/alexe/OneDrive/Desktop/backtester_v5.5 (1)/backtester_v5.5")
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
